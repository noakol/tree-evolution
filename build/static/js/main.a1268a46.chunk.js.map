{"version":3,"sources":["assets/share-icon.png","api/treeEvolution.actionTypes.js","api/store-creator.js","api/treeEvolution.reducer.js","components/templates/treeView.js","components/treeEvolution.config.js","components/treeEvolution.utils.js","components/parentTree.component.js","components/childrenTree.component.js","components/templates/treePresentationView.js","components/treeEvolution.component.js","api/actionCreator.js","api/initState.js","components/treeEvolution.connect.js","api/treeEvolution.api.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","treeEvolution_actionTypes","SET_SELECT_TREE","SET_VIEW_MODE","CLEAR_STATE","store","createStore","newState","state","arguments","length","undefined","action","type","payload","actionTypes","Object","objectSpread","selectedTree","mode","treeView","_ref","treeProps","treeStyle","leafStyle","trunkStyle","frutieStyle","_ref$handleTreeSelect","handleTreeSelect","containerClassName","react_default","a","createElement","className","concat","onClick","style","treeEvolution_config","viewMode","present","select","numberOfChildren","propsArray","borderStyles","generateChildProps","parentProps","mutationProp","config","getRandomInt","childProps","getMutationValue","generateRandomeColor","Math","round","random","toString","min","max","ceil","floor","prop","value","getTopTreeBorder","borderColor","borderWidth","borderStyle","console","log","createStyleFromProps","props","backgroundColor","mainColor","border","borderProps","treeTopBorder","width","trunkWidth","trunkColor","display","frutieExist","frutieColor","ParentTreeComponent","this","assign","Component","ChildrenTreeComponent","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","index","childrenProps","push","_this2","generateChildrenProps","map","handleChildClick","key","PureComponent","treePresentationView","TreeEvolutionComponent","handleShare","e","url","window","location","href","encodeURI","copy","alert","setSelectedTree","getSelectionViewMarkup","src","shareIcon","alt","parentTree_component_ParentTreeComponent","childrenTree_component_ChildrenTreeComponent","onpopstate","updateSelectedTreeFromUrl","setInitialState","_this$props","actionCreator","initState","api","treeEvolutionApi","urlParams","URLSearchParams","search","propsFromUrl","get","modeFromUrl","error","clearStateAction","updateSelectedTree","initialState","getParentProps","getState","updateSelectedTreeAction","updateUrl","jsonProps","getEncodedQuery","JSON","stringify","history","pushState","parseQuery","updateViewModeAction","getViewMode","urlValue","decodedVal","decodeURI","parse","query","colonRegEx","RegExp","commRegEx","newQuery","encodeURIComponent","replace","dispatch","component","connect","App","es","components","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1268a46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/share-icon.05f1e922.png\";","export default {\n    SET_SELECT_TREE: 'SET_SELECT_TREE',\n    SET_VIEW_MODE: 'SET_VIEW_MODE',\n    CLEAR_STATE: 'CLEAR_STATE'\n};","import { createStore } from 'redux';\nimport treeEvolutionReducer from './treeEvolution.reducer';\n\nconst store = createStore(\n    treeEvolutionReducer\n);\n\nexport default store;\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()","import actionTypes from './treeEvolution.actionTypes';\n\nexport default function movie(state = {}, action) {\n  const {type, payload} = action;\n    let newState;\n    switch (type) {\n      case actionTypes.SET_SELECT_TREE:\n        newState = {\n            ...state,\n          selectedTree: payload\n        };\n        break;\n      case actionTypes.SET_VIEW_MODE:\n          newState = {\n              ...state,\n              mode: payload\n          };\n          break;\n      case actionTypes.CLEAR_STATE:\n          newState = {};\n          break;\n      default:\n        newState = state;\n        break;\n    }\n    return newState;\n};\n","import React from 'react';\n\nexport default ({\n    treeProps,\n    treeStyle,\n    leafStyle,\n    trunkStyle,\n    frutieStyle,\n    handleTreeSelect = () => {},\n    containerClassName\n}) => {\n    return (\n        <div \n            className={containerClassName ? `box ${containerClassName}` : \"box\"}\n            onClick={() => handleTreeSelect(treeProps)} >\n            <div className=\"center-circle\" style={treeStyle}>\n                <div className=\"fruties-container\">\n                    <div className=\"tree-frutie\" style={frutieStyle} />\n                    <div className=\"tree-frutie\" style={frutieStyle} />\n                    <div className=\"tree-frutie\" style={frutieStyle} />\n                </div> \n                <div className=\"center-circle-copy\" style={treeStyle} />\n                <div className=\"leaf-one\" style={leafStyle} />\n                <div className=\"leaf-two\" style={leafStyle} />\n                <div className=\"leaf-three\" style={leafStyle} />\n                <div className=\"leaf-four\" style={leafStyle} />\n                <div className=\"leaf-five\" style={leafStyle} />\n                <div className=\"leaf-six\" style={leafStyle} />\n                <div className=\"leaf-seven\" style={leafStyle} />\n                <div className=\"leaf-height\" style={leafStyle} />\n                <div className=\"leaf-nine\" style={leafStyle} />\n                <div className=\"leaf-ten\" style={leafStyle} />\n                <div className=\"trunk\" style={trunkStyle} />\n            </div>   \n        </div> \n    );\n};","export default {\n    viewMode: {\n        present: 'present',\n        select: 'select'\n    },\n    numberOfChildren: 3,\n    propsArray: \n        ['mainColor', 'trunkWidth', 'trunkColor', 'treeTopBorder', 'frutieColor', 'frutieExist'],\n    borderStyles: ['solid', 'dashed', 'dotted', 'double']\n}","import config from './treeEvolution.config';\n\nexport const generateChildProps = (parentProps) => {\n    const mutationProp = config.propsArray[getRandomInt(0, config.propsArray.length)];\n    const childProps = {...parentProps};\n\n    childProps[mutationProp] = getMutationValue(mutationProp);\n\n    return childProps;\n\n}\n\nexport const generateRandomeColor = () => {\n    return \"#\" + (Math.round(Math.random() * 0XFFFFFF)).toString(16);\n};\n\nexport const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomBorderStyle = () => {\n    return config.borderStyles[getRandomInt(0, config.borderStyles.length)];\n}\n\nexport const getMutationValue = (prop) => {\n    let value;\n    switch (prop) {\n        case 'mainColor':\n            value = generateRandomeColor();\n            break;\n        case 'trunkWidth': \n            value = getRandomInt(5, 51);\n            break;\n        case 'trunkColor': \n            value = generateRandomeColor();\n            break;\n        case 'treeTopBorder': \n            value = getTopTreeBorder();\n            break;\n        case 'frutieColor': \n            value = generateRandomeColor();\n            break;\n        case 'frutieExist': \n            value = getRandomInt(0, 2);;\n            break;\n        default:\n            break;\n    }\n    return value;         \n}\n\nexport const getTopTreeBorder = () => {\n    const style =  {\n        borderColor: generateRandomeColor(),\n        borderWidth: getRandomInt(0, 10),\n        borderStyle: getRandomBorderStyle()\n    }\n    console.log(style);\n    return style;\n}\n\nconst generateBorderStyle = (borderProps) => {\n    if (borderProps) {\n        return (\n            `${borderProps.borderStyle} ${borderProps.borderWidth}px ${borderProps.borderColor}`);\n    }\n    return '';\n}\n\nexport const createStyleFromProps = (props) => {\n    if (!props) {\n        return {};\n    }\n    \n    return {\n        treeStyle: {\n            'backgroundColor': props.mainColor \n        },\n        leafStyle: {\n            'backgroundColor': props.mainColor,\n            'border': generateBorderStyle(props.treeTopBorder) \n        },\n        trunkStyle: {\n            width: `${props.trunkWidth}%`,\n            backgroundColor: props.trunkColor\n        },\n        frutieStyle: {\n            display: !props.frutieExist && 'none',\n            backgroundColor: props.frutieColor\n        }\n    };\n}\n\nexport default {\n    getRandomInt,\n    generateChildProps,\n    getMutationValue\n}","import React, {Component} from 'react';\nimport Tree from './templates/treeView';\nimport {createStyleFromProps} from './treeEvolution.utils';\n\nexport default class ParentTreeComponent extends Component {\n    render() {\n        const {parentProps} = this.props;\n        return (\n            <Tree \n                treeProps={parentProps} \n                {...createStyleFromProps(parentProps)}\n                containerClassName={\"parent\"}\n            />\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport Tree from './templates/treeView';\nimport config from './treeEvolution.config';\nimport {generateChildProps, createStyleFromProps} from './treeEvolution.utils';\n\nexport default class ChildrenTreeComponent extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.config = config;\n    }\n\n    generateChildrenProps() {\n        const {parentProps} = this.props;\n        const {numberOfChildren} = this.config;\n        let index = numberOfChildren;\n        const childrenProps = [];\n\n        while (index) {\n            childrenProps.push(generateChildProps(parentProps));\n            index--;\n        }\n\n        return childrenProps;\n    }\n\n    render() {\n        const childrenProps = this.generateChildrenProps();\n        return (\n            <div className=\"children-container\">\n                {childrenProps.length && childrenProps.map((childProps, index) => {\n                    return (\n                        <div className=\"box-wrapper\">\n                            <Tree \n                                {...createStyleFromProps(childProps)}\n                                handleTreeSelect={this.props.handleChildClick}\n                                key={index}\n                                treeProps={childProps}\n                            />\n                        </div>\n                    ); \n                })}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Tree from './treeView';\nimport {createStyleFromProps} from '../treeEvolution.utils';\n\nexport default ({props}) => {\n    return (\n        <div className=\"tree-presentation-container\">\n            <h1>This is My tree!</h1>\n            <Tree \n                treeProps={props} \n                {...createStyleFromProps(props)}\n                containerClassName={\"parent\"}\n            />\n        </div>\n    );\n}","import React, {Component} from 'react';\nimport ParentTree from './parentTree.component';\nimport ChildrenTree from './childrenTree.component';\nimport shareIcon from '../assets/share-icon.png';\nimport copy from 'copy-to-clipboard';\nimport config from './treeEvolution.config';\nimport TreePresentView from './templates/treePresentationView';\n\nexport default class TreeEvolutionComponent extends Component {\n    componentDidMount() {\n        window.onpopstate = () => {\n            this.props.updateSelectedTreeFromUrl();\n        };\n        this.props.setInitialState();\n    }\n\n    handleShare = (e) => {\n        const url = window.location.href + encodeURI('&mode=present');\n        copy(url);\n        alert('A link was coppied in to your clipbaord!');\n    }\n\n    handleChildClick = (childProps) => {\n        this.props.setSelectedTree(childProps);\n    }\n\n    getSelectionViewMarkup = () => {\n        const {parentProps} = this.props;\n        return (\n            <div>\n                <button className=\"share\" onClick={this.handleShare} value={\"bla\"}>\n                    <img src={shareIcon} alt=\"share\" />\n                </button>\n                <div className=\"trees-container\">\n                    <ParentTree parentProps={parentProps} />\n                    <ChildrenTree \n                        handleChildClick={this.handleChildClick}\n                        parentProps={parentProps} />\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const {mode, parentProps} = this.props;\n\n        if (!parentProps) return null;\n\n        return (\n            mode === config.viewMode.present ?\n            <TreePresentView props={parentProps} /> :\n            this.getSelectionViewMarkup()\n        );\n    }\n}","export default (action, payload = {}) => {\n    return ({type: action, payload})\n};\n","import {getRandomInt, getTopTreeBorder, generateRandomeColor} from '../components/treeEvolution.utils';\nimport config from '../components/treeEvolution.config';\n\nexport default {\n    viewMode: config.viewMode.select,\n    selectedTree: {\n        mainColor: generateRandomeColor(),\n        trunkWidth: getRandomInt(5, 51),\n        treeTopBorder: getTopTreeBorder(),\n        frutieColor: generateRandomeColor(),\n        frutieExist: getRandomInt(0, 2)\n    }\n};\n","import {connect} from 'react-redux';\nimport TreeEvolutionComponent from './treeEvolution.component';\nimport treeEvolutionApi from '../api/treeEvolution.api';\nimport store from '../api/store-creator';\n\nconst api = new treeEvolutionApi(store);\n\nconst mapStateToProps = () => {\n    return {\n        parentProps: api.getParentProps(),\n        mode: api.getViewMode()\n    };\n};\n\nconst mapDispatchTpProps = () => {\n    return {\n        setSelectedTree: (treeProps) => {\n            api.updateSelectedTree(treeProps);\n        },\n        updateSelectedTreeFromUrl: () => {\n            api.updateSelectedTreeFromUrl()\n        },\n        setInitialState: () => {\n            api.setInitialState()\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchTpProps)(TreeEvolutionComponent);","import actionCreator from './actionCreator';\nimport actionTypes from './treeEvolution.actionTypes';\nimport initialState from './initState';\n\nexport default class treeEvolutionApi {\n    constructor(store) {\n        this.store = store;\n    };\n\n    setInitialState = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const propsFromUrl = urlParams.get('props');\n        const modeFromUrl = urlParams.get('mode');\n\n        if (propsFromUrl && modeFromUrl) {\n            try {\n                this.updateSelectedTreeFromUrl();\n            } catch (error) {\n                this.clearStateAction();\n                alert('the props set from the url are invalid' + error);\n            }\n        } else {\n            this.updateSelectedTree(initialState);\n        }\n    }\n\n    getParentProps = () => {\n        return this.store.getState().selectedTree;\n    }\n\n    updateSelectedTree = (props) => {\n        this.updateSelectedTreeAction(props);\n        this.updateUrl(props);\n    }\n\n    updateUrl = (props) => {\n        const jsonProps = this.getEncodedQuery(JSON.stringify(props));\n\n        window.history.pushState(null, null, '?props=' + jsonProps);\n    }\n\n    updateSelectedTreeFromUrl = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const props = this.parseQuery(urlParams.get('props'));\n        const mode = urlParams.get('mode');\n\n        props && this.updateSelectedTreeAction(props);\n        mode && this.updateViewModeAction(mode);\n    }\n\n\n    getViewMode = () => {\n       return this.store.getState().mode;\n    }\n\n    parseQuery = (urlValue) => {\n        if (urlValue) {\n            const decodedVal = decodeURI(urlValue);\n            return JSON.parse(decodedVal);\n        }\n        return null;\n    }\n\n    getEncodedQuery = (query) => {\n        const colonRegEx = new RegExp('%3A', 'g');\n        const commRegEx = new RegExp('%2C', 'g');\n\n        let newQuery = encodeURIComponent(query);\n        newQuery = newQuery.replace(colonRegEx, \":\");\n        newQuery = newQuery.replace(commRegEx, \",\");\n        return newQuery;\n    }\n\n    updateSelectedTreeAction = (payload) => {\n        this.store.dispatch(\n            actionCreator(actionTypes.SET_SELECT_TREE, payload));\n    }\n\n    updateViewModeAction = (payload) => {\n        this.store.dispatch(\n            actionCreator(actionTypes.SET_VIEW_MODE, payload));\n    }\n\n    clearStateAction = () => {\n        this.store.dispatch(\n             actionCreator(actionTypes.CLEAR_STATE)\n        );\n    }\n\n};","import component from './treeEvolution.connect';\nexport default component;","import React, { Component } from 'react';\nimport {Provider} from 'react-redux'\nimport store from './api/store-creator';\nimport TreeEvolution from './components';\nimport './App.css';\n\nwindow.store = store;\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <TreeEvolution />\n      </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}